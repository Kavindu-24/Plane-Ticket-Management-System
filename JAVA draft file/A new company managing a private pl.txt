A new company managing a private plane has asked you to create a Java program to manage 
and track seat reservations effectively. Your assignment involves designing and implementing 
this program. You will be working with the company’s aircraft, which is shown below: 
Figure 1. Plane seat plan. The plan has 4 rows with different numbers of seats (between 1 and 14 seats).
you can notice four rows of seats labelled as A, B, C and D, and it is 
important to note that these rows have varying seat capacities A and D have 14 seats, B and C have 12 seats. Seats are coded according to their row and seat number and have different prices.(A1 - A5, B1 - B5, C1 - C5 and D1 - D5 are $200) and (A6-A9, B6-B9, C6-C9 and D6-D9 are $150) and (A10-A14, B10-B12, C10-C12 and D10-D14 are $180.)

 complete the following tasks:  


Task 1) Create a new project titled PlaneManagement. Your project should have a class file named PlaneManagement. This class should contain a main method that initiates the program with the display of ‘Welcome to the Plane Management application’ at the start of the program.    
Implement the seat management system using standard arrays (the use of dynamic 
arrays such as ArrayList or similar is prohibited, and their use will be penalised) to 
keep track of the seats have been sold, and the seats that are still available. Use 0 to 
indicate that a seat is available, and 1 to indicate that a seat has been sold.  
At the start of the program all seats should be available (0). The main method will be the 
method called when the program starts (entry point) for all tasks described in this 
coursework.  

Task 2) Add a user menu in your main method that displays the following menu and asks the 
user to select an option. Option ‘0’ should terminate the program without crashing or giving an error. The rest of the options will be implemented in the next tasks. 

 1) buy a seat
 2) cancel a seat
 3) find first available seat
 4) show seating plan
 5) Print tickets information and total sales
 6) Search ticket
 0) quit

 
Task 3) Create a method called buy_seat that asks the user to input a row letter and a seat 
number. Check that the row and seat entered are valid and display the seat is available (free). then ask from user to enter yes to comfirm. then Record the seat as sold (as described in Task 1). Call this method when the user selects 
‘1’ in the main menu.  



Task 4) Create a method called cancel_seat that makes a seat available. It should ask the 
user to input a row number and a seat number. Check that the row and seat are valid, and 
that the seat is not available already. after that Record the seat as available (as described in Task 1). Call this method when the user selects ‘2’ in the main menu.  

  
Task 5) Create a method called find_first_available that find the first seat which is still 
available. You should search in row A first, then B, then C and then D. Call this method 
when the user selects ‘3’ in the main menu. 


Task 6)  Create a method called show_seating_plan that shows the seats that are 
available and the seats that have been sold. Display available seats with the character ‘O’ 
and the sold seats with ‘X’. Call this method when the user selects ‘4’ in the main menu.  
The output at the start of the program should have the following format:  
 
 OOOOOOOOOOOOOO
 OOOOOOOOOOOO
 OOOOOOOOOOOO
 OOOOOOOOOOOOOO

Please note that there is a space at the start of row B and C to match the plan seat plan.  
After buying a ticket for row A, seat 4, the output should look like this: 

 OOOXOOOOOOOOOO
 OOOOOOOOOOOO
 OOOOOOOOOOOO
 OOOOOOOOOOOOOO


Tsk 7) Create a new class file called Person (Person.java) with the following attributes: 
name, surname, and email.  Add a constructor that takes the 3 variables as input to create 
an object Person. Add all the getters and setters of the class Person. Add a method that 
prints the information from Person.  


Task 8) Create a new class file called Ticket (Ticket.java) with the following attributes: row, seat, price, and Person. Person is an object created using the class Person from Task 7. 
Add all the getters and setters of the class Ticket. Add a method that prints the information of a Ticket (including the information of the Person).  

Task 9) In the main program, add a array of Tickets to store all the tickets sold in that session. 
Then:  
1) Extend the buy_seat method such that when buying a ticket, it asks for all the 
information of a Person, creates a new Ticket with the corresponding price and seat 
information and adds the ticket to the new array of Tickets.   
2) Extend the cancel_seat method such that when cancelling a ticket, it removes 
the ticket from the array list of tickets.  


Task 10) Create a method called print_tickets_info that prints the information of all 
tickets that have been sold during the session, and calculates the total price of the tickets sold during the session Example, if ticket A1 and B7 were sold during the session, the total 
amount would be $350 (A1 = $200 + B2 = $150). Call this method when the user selects 
‘5’ in the main menu.  

Task 11) Create a method called search_ticket that asks the user to input a row letter and 
a seat number and searches if someone has bought that seat. If someone has bought the 
seat, it will print the Ticket and Person information, otherwise will display ‘This seat is 
available’. Call this method when the user selects ‘6’ in the main menu.  
  
Task 12) Add a method save in the class Ticket that saves the information of the Ticket 
(including the Person) in a file. The name of the file should be the name of the row and the 
seat number (e.g., A2.txt for a ticket sold in row A seat 2). Call this method every time a 
ticket is sold.